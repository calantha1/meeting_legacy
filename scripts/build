#!/usr/bin/env python

import argparse
import os
import os.path
import subprocess

SCRIPTS_DIR = os.path.dirname(os.path.abspath(__file__))
ROOT_DIR = os.path.dirname(SCRIPTS_DIR)
BUILD_DIR = os.path.join(ROOT_DIR, "build")


class Chdir(object):

    def __init__(self, path):
        self._path = path

    def __enter__(self):
        self._previous = os.getcwd()
        os.chdir(self._path)

    def __exit__(self, exc_type, exc_val, exc_tb):
        os.chdir(self._previous)


def safe_assert(condition, *args):
    pass


def makedir(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)
    safe_assert(os.path.isdir(directory))


def emptydir(directory):
    """
    Remove all the files in a directory.
    """
    for path in os.listdir(directory):
      path = os.path.join(directory, path)
      if os.path.isfile(path):
        os.unlink(path)
      else:
        shutil.rmtree(path)


def clean(options):
    makedir(BUILD_DIR)
    emptydir(BUILD_DIR)


def build(options):
    clean()
    with Chdir(ROOT_DIR):
        subprocess.check_call(["browserify",
                               "-t", "reactify",
                               "main.js",
                               "-o", "build/bundle.js"])


def deploy(options):
    pass


def main():
    parser = argparse.ArgumentParser(description="Build script for meeting.")
    subparsers = parser.add_subparsers(title="command", description="command to run")

    for command, fn in {"clean": clean,
                        "build": build,
                        "deploy": deploy}.iteritems():
        subparser = subparsers.add_parser(command)
        subparser.set_defaults(fn=fn)

    options = parser.parse_args()
    options.fn(options)


if __name__ == "__main__":
    main()
