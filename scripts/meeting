#!/usr/bin/env python

import argparse
import os
import os.path
import shutil
import subprocess

from shutil import copytree

SCRIPTS_DIR = os.path.dirname(os.path.abspath(__file__))
ROOT_DIR = os.path.dirname(SCRIPTS_DIR)
SRC_DIR = os.path.join(ROOT_DIR, "src")
BUILD_DIR = os.path.join(ROOT_DIR, "build")
ANSIBLE_DIR = os.path.join(ROOT_DIR, "ansible")


class Chdir(object):

    def __init__(self, path):
        self._path = os.path.abspath(path)

    def __enter__(self):
        self._previous = os.getcwd()
        os.chdir(self._path)

    def __exit__(self, exc_type, exc_val, exc_tb):
        os.chdir(self._previous)


def safe_assert(condition, *args):
    if not condition:
        raise Exception(args)


def makedirs(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)
    safe_assert(os.path.isdir(directory))


def emptydir(directory):
    """
    Remove all the files in a directory.
    """
    for path in os.listdir(directory):
      path = os.path.join(directory, path)
      if os.path.isfile(path):
        os.unlink(path)
      else:
        shutil.rmtree(path)


def copyfiles(source, destination, files):
    for file in files:
        source_file = os.path.join(source, file)
        destination_file = os.path.join(destination, file)
        makedirs(os.path.dirname(destination_file))
        shutil.copy(source_file, destination_file)


def command(args):
    try:
        subprocess.check_call(args)
    except subprocess.CalledProcessError:
        exit("Unable to run command %s" % list(args))


def clean(options):
    print "Cleaning..."
    if os.path.exists(BUILD_DIR):
        emptydir(BUILD_DIR)


def add_trailing_slash(path):
    if path.endswith("/"):
        return path
    return path + "/"


def reactify(source, target):
    command(["browserify", "-t", "reactify", "-o", target, source])


def build(options):
    print "Building..."
    static_dir = os.path.join(BUILD_DIR, "static")
    makedirs(BUILD_DIR)
    copyfiles(SRC_DIR, BUILD_DIR, ["service.js",
                                   "lib/guid.js",
                                   "lib/values.js",
                                   "lib/parse-message.js",
                                   ".htpasswd",
                                   ".htgroup"])
    sync(os.path.join(SRC_DIR, "static"), static_dir)
    with Chdir(ROOT_DIR):
        reactify(source=os.path.join(SRC_DIR, "app.jsx"), target=os.path.join(static_dir, "app.js"))
        reactify(source=os.path.join(SRC_DIR, "viewer.jsx"), target=os.path.join(static_dir, "viewer.js"))
    sync(os.path.join(ROOT_DIR, "node_modules"), os.path.join(BUILD_DIR, "node_modules"))


def sync(source, destination):
    print "Syncing '%s' and '%s'..." % (source, destination)
    command(["rsync", "-a", "--delete", add_trailing_slash(source), add_trailing_slash(destination)])


def deploy(options):
    if not options.skip_build:
        build(options)
    with Chdir(ANSIBLE_DIR):
        command(["ansible-playbook",
                 "meeting.yml",
                 "--ask-become-pass"])


def serve(options):
    if not options.skip_build:
        build(options)
    with Chdir(BUILD_DIR):
        command(["nodemon", "service.js"])


def main():
    parser = argparse.ArgumentParser(description="Build script for meeting.")
    subparsers = parser.add_subparsers(title="command", description="command to run")

    parser_clean = subparsers.add_parser("clean")
    parser_clean.set_defaults(fn=clean)

    parser_build = subparsers.add_parser("build")
    parser_build.set_defaults(fn=build)

    parser_deploy = subparsers.add_parser("deploy")
    parser_deploy.add_argument("--skip-build", action="store_true", default=False)
    parser_deploy.set_defaults(fn=deploy)

    parser_serve = subparsers.add_parser("serve")
    parser_serve.add_argument("--skip-build", action="store_true", default=False)
    parser_serve.set_defaults(fn=serve)

    options = parser.parse_args()
    options.fn(options)


if __name__ == "__main__":
    main()
